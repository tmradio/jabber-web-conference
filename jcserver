#!/usr/bin/env python
# vim: set fileencoding=utf-8:

"""Multi-user chat server for the MUC web interface.

Configuration is read from ~/.jcserver, which must be a text file containing 4
words: your jid, jabber password, jabber chat room and the fifo to use.  Example:

  alice@example.com secret tmradio@conference.jabber.ru /tmp/jcserver.fifo

To send a message:

  echo "alice_1 hello, world." > /tmp/jcserver.fifo

To shut down the server press ^C.

This version uses JabberBot from the ardj package.  To run without installing
the package use this command:

  PYTHONPATH=../ ./jcserver
"""

import BaseHTTPServer
import cgi
import datetime
import json
import os
import socket
import sys
import threading
import time
import urllib
import xmpp

JABBER_LOGIN = None
JABBER_PASSWORD = None
JABBER_NICK = 'chat.tmradio.net'
JABBER_CHAT_ROOM = None
JABBER_TIMEOUT = 600
JABBER_WEB_ROOT = 'static'

shutting_down = False

class ChatClient(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

        self.__nickname = JABBER_NICK
        self.__messages = []
        self.__incoming = []
        self.__jid = None
        self.__conn = None
        self.__lastmsg = time.time()
        self.__shutdown = False

        self.start()

    def post_message(self, nickname, message):
        """Adds a message to the outgoing queue."""
        self.__messages.append(u'[%s] %s' % (nickname, message))
        self.__lastmsg = time.time()

    def run(self):
        print 'Client %s thread started.' % self.__nickname

        self.__jid = xmpp.JID(JABBER_LOGIN)
        self.__conn = self.connect()
        self.__join()

        global shutting_down
        while not self.__shutdown and not shutting_down:
            try:
                self.__conn.Process(5)
                if self.__messages:
                    while self.__messages:
                        self.__talk(self.__messages[0])
                        del self.__messages[0]
            except IOError, e:
                print >>sys.stderr, e
                print 'Reconnecting.'
                self.__conn = self.connect()
                self.__join()
            except KeyboardInterrupt:
                self.__shutdown = True

    def connect(self):
        conn = xmpp.Client(self.__jid.getDomain(), debug=[])

        conres = conn.connect()
        if not conres:
            self.log.error('unable to connect to server %s.' % self.__jid.getDomain())
            return None
        if conres <> 'tls':
            self.log.warning('unable to establish secure connection - TLS failed!')

        authres = conn.auth(self.__jid.getNode(), JABBER_PASSWORD, self.__nickname)
        if not authres:
            self.log.error('unable to authorize with server.')
            return None
        if authres <> 'sasl':
            self.log.warning("unable to perform SASL auth os %s. Old authentication method used!" % self.__jid.getDomain())

        conn.sendInitPresence()
        conn.RegisterHandler('message', self.__on_message)
        return conn

    def get_messages(self, since=0):
        """Returns last 100 messages."""
        messages = [m for m in self.__incoming if m['ts'] > since]
        return messages[-100:]

    def get_last_message_ts(self):
        """Returns last message timestamp."""
        if not self.__incoming:
            return 0
        return self.__incoming[-1]['ts']

    def __join(self):
        self.__conn.send(xmpp.Presence(u'/'.join((JABBER_CHAT_ROOM, self.__nickname))))

    def __leave(self):
        msg = xmpp.Presence()
        msg.setTo(unicode(JABBER_CHAT_ROOM) + u'/' + self.__nickname)
        msg.setType('unavailable')
        self.__conn.send(msg)

    def __talk(self, text):
        if text:
            msg = xmpp.protocol.Message(body=text)
            msg.setTo(unicode(JABBER_CHAT_ROOM))
            msg.setType('groupchat')
            self.__conn.send(msg)

    def __on_message(self, conn, mess):
        """Handles incoming messages."""
        try:
            if mess.getType() != 'groupchat':
                return
            if mess.getFrom().getStripped() != JABBER_CHAT_ROOM:
                return
            if mess.getFrom() == JABBER_CHAT_ROOM:
                return
            self.add_incoming_message(mess)
        except Exception, e:
            print e

    def add_incoming_message(self, mess):
        msg = {
            'ts': self.__get_msg_ts(mess),
            'nickname': unicode(mess.getFrom()).split('/', 1)[1],
            'message': mess.getBody(),
        }
        msg['datetime'] = time.strftime('%H:%M', time.localtime(msg['ts']))

        print u'%s %s> %s' % (msg['datetime'], msg['nickname'], msg['message'])

        self.__incoming.append(msg)

    def __get_msg_ts(self, msg):
        """Returns message timestamp as float."""
        now = time.time()
        delay = msg.getTag('delay')
        if not delay:
            return now
        if not 'stamp' in delay.attrs:
            return now
        return time.mktime(time.strptime(delay.attrs['stamp'][:19], '%Y-%m-%dT%H:%M:%S'))


class ChatServer(object):
    """The main class that glues together the XMPP client and the HTTP
    server."""
    def __init__(self):
        """Initializes the object by creating an isntance of the XMPP client."""
        self.xmpp_client = ChatClient()

    def on_message(self, nickname, message):
        """Sends a message to the chat room."""
        print '>>', nickname, message
        self.xmpp_client.post_message(nickname, message)

    def get_messages(self, since=0):
        """Returns logs."""
        return self.xmpp_client.get_messages(since=since)

    def get_client(self, nickname):
        if not self.clients.has_key(nickname):
            self.clients[nickname] = client(nickname, on_end=lambda: self.detach(nickname))
        return self.clients[nickname]

    def shutdown(self):
        pass

    def detach(self, nickname):
        if self.clients.has_key(nickname):
            print 'Detaching %s' % nickname
            del self.clients[nickname]


class HTTPChatServer(ChatServer):
    """HTTP version.

    To send a test message:
    curl --data 'nickname=umonkey_1&message=hello,+world.' http://localhost:8080/
    """
    def __init__(self):
        """Initializes the server."""
        super(HTTPChatServer, self).__init__()
        self.httpd = BaseHTTPServer.HTTPServer(('', 8080), RequestHandler)
        self.httpd.on_message = self.on_message
        self.httpd.get_messages = self.get_messages
        self.httpd.xmpp = self.xmpp_client

    def run(self):
        """Starts serving forever."""
        self.httpd.serve_forever()


class RequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    def __init__(self, addr, handler, server):
        BaseHTTPServer.BaseHTTPRequestHandler.__init__(self, addr, handler, server)
        self.server = server

    def do_POST(self, *args, **kwargs):
        form = cgi.FieldStorage(fp=self.rfile, headers=self.headers, environ={'REQUEST_METHOD':'POST', 'CONTENT_TYPE':self.headers['Content-Type']})

        nickname = message = None
        if 'nickname' in form:
            nickname = form['nickname'].value.decode('utf-8')
        if 'message' in form:
            message = form['message'].value.decode('utf-8')

        if message:
            self.server.on_message(nickname or 'anonymous', message)
        self.send_response(200, 'OK')
        self.end_headers()
        self.wfile.write('OK\n')

    def do_GET(self):
        path, args = self.get_args()
        if path == '/':
            path = '/index.html'
        allowed = ('/index.html', '/jquery.js', '/chat.js', '/chat.css', '/messages.json', '/favicon.ico')

        if path not in allowed:
            self.send_error(403, 'Forbidden')
            return

        if path == '/messages.json':
            return self.get_messages(since=float(args.get('since', 0)))

        filename = os.path.join(JABBER_WEB_ROOT, path.lstrip('/'))
        if not os.path.exists(filename):
            self.send_error(404, 'Not Found')
            return

        data = open(filename, 'rb').read()

        self.send_response(200, 'OK')
        if self.path.endswith('.js'):
            self.send_header('Content-Type', 'text/javascript; charset=utf-8')
        elif self.path.endswith('.css'):
            self.send_header('Content-Type', 'text/css; charset=utf-8')
        else:
            self.send_header('Content-Type', 'text/html; charset=utf-8')
        self.send_header('Content-Length', str(len(data)))
        self.end_headers()
        self.wfile.write(data)

    def get_messages(self, since):
        """Returns log messages."""
        messages = self.server.get_messages(since=since)
        data = {
            'last': self.server.xmpp.get_last_message_ts(),
            'messages': messages,
        }

        self.send_response(200, 'OK')
        self.send_header('Content-Type', 'text/plain; charset=UTF-8')
        self.end_headers()
        return self.wfile.write(json.dumps(data))

    def get_args(self):
        if '?' not in self.path:
            return self.path, {}
        path, args = self.path.split('?', 1)
        args = [arg.split('=', 1) for arg in args.split('&')]
        return path, dict(args)


if __name__ == '__main__':
    data = open(os.path.expanduser('~/.jcserver'), 'rb').read().strip().split(' ')
    JABBER_LOGIN, JABBER_PASSWORD, JABBER_CHAT_ROOM = data[0:3]

    try:
        HTTPChatServer().run()
    except KeyboardInterrupt:
        shutting_down = True
