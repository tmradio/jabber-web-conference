#!/usr/bin/env python
# vim: set fileencoding=utf-8:

"""Multi-user chat server for the MUC web interface.

Reads messages of the "nickname text..." form from a fifo, spawns a new client
for each new nickname, sends the messages out.

Configuration is read from ~/.jcserver, which must be a text file containing 4
words: your jid, jabber password, jabber chat room and the fifo to use.  Example:

  alice@example.com secret tmradio@conference.jabber.ru /tmp/jcserver.fifo

To send a message:

  echo "alice_1 hello, world." > /tmp/jcserver.fifo

To shut down the server press ^C.

This version uses JabberBot from the ardj package.  To run without installing
the package use this command:

  PYTHONPATH=../ ./jcserver
"""

import cgi
import datetime
import json
import os
import socket
import sys
import threading
import time
import urllib
import xmpp
import BaseHTTPServer

JABBER_LOGIN = None
JABBER_PASSWORD = None
JABBER_NICK = 'chat-server'
JABBER_CHAT_ROOM = None
JABBER_FIFO = None
JABBER_TIMEOUT = 600
JABBER_WEB_ROOT = '/sites/files.tmradio.net/chat'

shutting_down = False

class client(threading.Thread):
    def __init__(self, nickname, on_end):
        threading.Thread.__init__(self)
        self.__nickname = nickname
        self.__on_end = on_end
        self.__messages = [None, None] # some delay
        self.__incoming = []
        self.__jid = None
        self.__conn = None
        self.__lastmsg = time.time()
        self.__shutdown = False

        self.start()

    def post_message(self, message):
        self.__messages.append(message)
        self.__lastmsg = time.time()

    def run(self):
        print 'Client %s thread started.' % self.__nickname

        self.__jid = xmpp.JID(JABBER_LOGIN)
        self.__conn = self.connect()
        self.__join()

        global shutting_down
        while not self.__shutdown and not shutting_down:
            try:
                self.__conn.Process(1)

                if time.time() - self.__lastmsg > JABBER_TIMEOUT:
                    print '%s timed out' % self.__nickname
                    self.__shutdown = True
                elif self.__messages:
                    self.__talk(self.__messages.pop())
            except KeyboardInterrupt:
                shutdown = True

        print 'Client %s thread stopped.' % self.__nickname
        self.__on_end()

    def connect(self):
        conn = xmpp.Client(self.__jid.getDomain(), debug=[])

        conres = conn.connect()
        if not conres:
            self.log.error('unable to connect to server %s.' % self.__jid.getDomain())
            return None
        if conres <> 'tls':
            self.log.warning('unable to establish secure connection - TLS failed!')

        authres = conn.auth(self.__jid.getNode(), JABBER_PASSWORD, self.__nickname)
        if not authres:
            self.log.error('unable to authorize with server.')
            return None
        if authres <> 'sasl':
            self.log.warning("unable to perform SASL auth os %s. Old authentication method used!" % self.__jid.getDomain())

        conn.sendInitPresence()
        conn.RegisterHandler('message', self.__on_message)
        return conn

    def get_logs(self):
        logs = self.__incoming
        self.__incoming = []
        return logs

    def __join(self):
        self.__conn.send(xmpp.Presence(u'/'.join((JABBER_CHAT_ROOM, self.__nickname))))

    def __leave(self):
        msg = xmpp.Presence()
        msg.setTo(unicode(JABBER_CHAT_ROOM) + u'/' + self.__nickname)
        msg.setType('unavailable')
        self.__conn.send(msg)

    def __talk(self, text):
        if text:
            msg = xmpp.protocol.Message(body=text)
            msg.setTo(unicode(JABBER_CHAT_ROOM))
            msg.setType('groupchat')
            self.__conn.send(msg)

    def __on_message(self, conn, mess):
        try:
            if mess.getType() != 'groupchat':
                return
            if mess.getFrom().getStripped() != JABBER_CHAT_ROOM:
                return
            if mess.getFrom() == JABBER_CHAT_ROOM:
                return
            self.__incoming.append({'datetime': self.__get_msg_ts(mess), 'nickname': unicode(mess.getFrom()).split('/', 1)[1], 'message': mess.getBody()})
        except Exception, e:
            print e

    def __get_msg_ts(self, msg):
        now = datetime.datetime.now().strftime('%H:%M')
        delay = msg.getTag('delay')
        if not delay:
            return now
        if not 'stamp' in delay.attrs:
            return now
        return datetime.datetime.strptime(delay.attrs['stamp'][:19], '%Y-%m-%dT%H:%M:%S').strftime('%H:%M')


class server:
    def __init__(self):
        self.clients = {}

    def run(self):
        try:
            while True:
                nickname, message = self.read()
                if nickname and message:
                    self.on_message(nickname, message)
        finally:
            self.shutdown()

    def on_message(self, nickname, message):
        self.get_client(nickname).post_message(message)

    def get_logs(self, nickname):
        return self.get_client(nickname).get_logs()

    def get_client(self, nickname):
        if not self.clients.has_key(nickname):
            self.clients[nickname] = client(nickname, on_end=lambda: self.detach(nickname))
        return self.clients[nickname]

    def shutdown(self):
        pass

    def detach(self, nickname):
        if self.clients.has_key(nickname):
            print 'Detaching %s' % nickname
            del self.clients[nickname]


class fifo_server(server):
    def __init__(self):
        server.__init__(self)

        fname = JABBER_FIFO
        if os.path.exists(fname):
            os.unlink(fname)
        os.mkfifo(fname)
        self.f = open(fname, 'rb')

    def read(self):
        nickname, message = None, None
        data = self.f.read(1024)
        if data:
            parts = data.strip().split(' ', 1)
            if len(parts) == 2:
                nickname, message = parts
        return nickname, message

    def shutdown(self):
        fname = JABBER_FIFO
        if os.path.exists(fname):
            os.unlink(fname)


class http_server(server):
    u"""HTTP version.

    To send a test message:
    curl --data 'nickname=umonkey_1&message=hello,+world.' http://localhost:8000/
    """
    def __init__(self):
        server.__init__(self)
        self.httpd = BaseHTTPServer.HTTPServer(('', 8000), http_request_handler)
        self.httpd.on_message = self.on_message
        self.httpd.get_logs = self.get_logs

    def run(self):
        self.httpd.serve_forever()


class http_request_handler(BaseHTTPServer.BaseHTTPRequestHandler):
    def __init__(self, addr, handler, server):
        BaseHTTPServer.BaseHTTPRequestHandler.__init__(self, addr, handler, server)
        self.server = server

    def do_POST(self, *args, **kwargs):
        form = cgi.FieldStorage(fp=self.rfile, headers=self.headers, environ={'REQUEST_METHOD':'POST', 'CONTENT_TYPE':self.headers['Content-Type']})
        self.server.on_message(form['nickname'].value.decode('utf-8'), form['message'].value.decode('utf-8'))
        self.send_response(200, 'OK')
        self.end_headers()
        self.wfile.write('OK\n')

    def do_GET(self):
        path = self.path.split('?', 1)[0]
        if path == '/':
            path = '/index.html'
        allowed = ('/index.html', '/chattemplate.txt', '/js/jquery.js', '/js/smalljabber.js', '/getlogs.php', '/favicon.ico')

        if path not in allowed:
            self.send_error(403, 'Forbidden')
            return

        if path == '/getlogs.php':
            return self.get_logs()

        filename = os.path.join(JABBER_WEB_ROOT, path.lstrip('/'))
        if not os.path.exists(filename):
            self.send_error(404, 'Not Found')
            return

        data = open(filename, 'rb').read()

        self.send_response(200, 'OK')
        if self.path.endswith('.js'):
            self.send_header('Content-Type', 'text/javascript; charset=utf-8')
        else:
            self.send_header('Content-Type', 'text/html; charset=utf-8')
        self.send_header('Content-Length', str(len(data)))
        self.end_headers()
        self.wfile.write(data)

    def get_logs(self):
        args = self.path.split('?', 1)[1]
        if args.startswith('nickname='):
            nickname = urllib.unquote_plus(args.split('=', 1)[1]).decode('utf-8')
            logs = self.server.get_logs(nickname)
            if logs:
                print 'Sending %u log messages to %s.' % (len(logs), nickname)
                self.send_response(200, 'OK')
                self.send_header('Content-Type', 'text/json; charset=utf-8')
                self.end_headers()
                response = json.dumps(logs)
                return self.wfile.write(response)
            return self.send_response(200, 'OK')
        self.send_response(404, 'Not Found')


if __name__ == '__main__':
    data = open(os.path.expanduser('~/.jcserver'), 'rb').read().strip().split(' ')
    JABBER_LOGIN, JABBER_PASSWORD, JABBER_CHAT_ROOM, JABBER_FIFO = data[0:4]

    try:
        http_server().run()
    except KeyboardInterrupt:
        shutting_down = True
